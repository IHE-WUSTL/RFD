/*******************************************************************************
 * Copyright (c) 2015 Washington University in St. Louis All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. The License is available at:
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
 * or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License. Contributors:
 * Initial author: Ralph Moulton / MIR WUSM IHE Development Project
 * moultonr@mir.wustl.edu
 ******************************************************************************/
package edu.wustl.mir.erl.ihe.rfd.tests.FRCE.BFDR_E_1_10000_LDS_A;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import edu.wustl.mir.erl.ihe.rfd.cda.DataElement;
import edu.wustl.mir.erl.ihe.rfd.cda.document.BFDRBirth;
import edu.wustl.mir.erl.ihe.rfd.servers.Test.Phase;
import edu.wustl.mir.erl.ihe.util.LabelValue;
import edu.wustl.mir.erl.ihe.util.Plug;
import edu.wustl.mir.erl.ihe.util.Result;
import edu.wustl.mir.erl.ihe.util.Status;
import edu.wustl.mir.erl.ihe.util.StatusHelper;
import edu.wustl.mir.erl.ihe.util.StatusType;
import edu.wustl.mir.erl.ihe.util.StatusUpdateType;
import edu.wustl.mir.erl.ihe.util.Util;
import edu.wustl.mir.erl.ihe.util.XmlUtil;
import edu.wustl.mir.erl.ihe.ws.WSProperties;
import edu.wustl.mir.erl.ihe.ws.db.MessageType;
import edu.wustl.mir.erl.ihe.ws.db.TransactionType;
import edu.wustl.mir.erl.ihe.ws.db.WSLog;

/**
 * Inspect CDA file generated by FormReceiver CDA Exporter actor upon receiving
 * a test SubmitFormRequest (ITI-35). Determines if the passed document is a
 * valid CDA document of the required type. Looks for each of the values
 * included in the SubmitFormRequest in the CDA document, matching the values
 * with those in the request.
 */
public class CDAInspector implements Serializable, WSProperties {
   private static final long serialVersionUID = 1L;

   private static final String TEST_ID = "BFDRBirthInspectCDA";
   private static String request;
   private static final String REQUEST = "SubmitFormRequest";
   private static List <LabelValue> testValues = new ArrayList <>();
   private static Logger log;
   private WSLog wsLog;

   /*
    * Reads in the SubmitFormRequest.xml and generates a list of the names and
    * values to match with the contents of the CDA form.
    */
   static {
      log = Util.getLog();
      try {
         log.trace("Loading " + CDAInspector.class.getCanonicalName());
         request = IOUtils.toString(
            FormFiller.class.getResource("SubmitFormRequest.xml"),
            CHAR_SET_UTF_8);
         InputStream is =
            CDAInspector.class.getResourceAsStream("SubmitFormRequest.xml");
         DocumentBuilderFactory dbFactory =
            DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(is);
         Element de = doc.getDocumentElement();
         NodeList nodeList = de.getElementsByTagName("*");
         for (int i = 0; i < nodeList.getLength(); i++ ) {
            Node n = nodeList.item(i);
            if (n.getNodeType() != Node.ELEMENT_NODE) continue;
            Element e = (Element) n;
            String eName = e.getTagName();
            String value = XmlUtil.getFirstLevelTextContent(e);
            log.trace("   " + eName + ":" + value);
            testValues.add(new LabelValue(eName, value));
         }
      } catch (Exception e) {
         Util.exit(Util.getEM(e));
      }
   } // EO static block // block

   /**
    * Inspects uploaded CDA file.
    * @param formId actual form ID used in test
    * 
    * @param bytes contents of the uploaded file
    * @return a status string for some errors, or null.
    */

   public String inspectCDADocument(String formId, byte[] bytes) {
      try {
         if (bytes == null || bytes.length == 0) return "null file uploaded";
         String msg = new String(bytes, CHAR_SET_UTF_8);
         InputStream is = new ByteArrayInputStream(bytes);
         DocumentBuilderFactory dbFactory =
            DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(is);

         // TODO code here to determine if doc is valid BFDRBirth CDA document.

         BFDRBirth cdaDoc = new BFDRBirth();
         cdaDoc.loadValue(doc.getDocumentElement());

         wsLog = new WSLog();
         wsLog.setTransactionType(TransactionType.CDA_CLIENT);
         String req = new Plug(request).set("formId", formId).get();
         wsLog.addMessage(REQUEST, MessageType.XML, req);
         wsLog.addMessage("BFDRBirth CDA Document", MessageType.XML, msg);
         wsLog.setSoapRequestName(REQUEST);

         boolean passed = true;
         for (LabelValue testValue : testValues) {
            String parName = testValue.getLabel();
            String expectedValue = testValue.getValue();
            if (parName.equals("formId")) expectedValue = formId;
            DataElement de = cdaDoc.getDataElementByName(parName);
            
            String foundValue = "missing";
            String parElement = parName;
            if (de != null) {
               foundValue = de.getValue();
               parElement = de.getElement();
            }
            
            String parValue = parElement + " expected: " + expectedValue
               + ", found: " + foundValue;
            boolean foundIt = expectedValue.equals(foundValue);
            if (foundIt == false) passed = false;
            if (foundIt) parValue += " - PASS";
            else parValue += " - FAIL";
            wsLog.addSoapRequestNameValuePair(
               new org.javatuples.LabelValue <String, Object>(parName,
                  parValue));
         }
         if (passed) wsLog.addStatus(TSTStatus.TST_PASS);
         else wsLog.addStatus(TSTStatus.TST_FAIL);

         return null;
      } catch (Exception e) {
         log.warn(Util.getEM(e));
         return "Uploaded CDA document error: " + e.getMessage();
      }
   }

   /**
    * @return WSLog instance, or null if never created.
    */
   public WSLog getWSLog() {
      return wsLog;
   }

   /**
    * Status codes used by this particular implementor.
    */
   @SuppressWarnings("javadoc")
   public enum TSTStatus implements Status {

      TST_PASS(Phase.TST, Result.PASS, Level.TRACE,
         "BFDRBirth CDA document values match SubmitFormRequest: PASS"),

      TST_FAIL(Phase.TST, Result.FAIL, Level.DEBUG,
         "BFDRBirth CDA document values match SubmitFormRequest: FAIL");

      private Phase phase;
      private Result result;
      private Level logLevel;
      private String statusMsg;

      private static final String setCode = TEST_ID + "_FM";

      private TSTStatus(Phase ph, Result pf, Level ll, String msg) {
         phase = ph;
         result = pf;
         logLevel = ll;
         statusMsg = msg;
      }

      @Override
      public Result getResult() {
         return result;
      }

      @Override
      public StatusUpdateType getUpdateType() {
         return phase.updateType;
      }

      @Override
      public String getMsg() {
         return phase.phaseMsg + ": " + statusMsg;
      }

      @Override
      public String getStatusMsg() {
         return statusMsg;
      }

      @Override
      public String encode() {
         return setCode + "," + name() + "|";
      }

      @Override
      public Level getLogLevel() {
         return logLevel;
      }

      @Override
      public String getPhaseMsg() {
         return phase.phaseMsg;
      }

      @Override
      public String getSetCode() {
         return setCode;
      }

      @Override
      public StatusType getStatusType() {
         return phase.statusType;
      }

      /**
       * @param name of an instance of {@link TSTStatus}
       * @return the TSTStatus instance corresponding to the passed name, cast
       * to an {@link edu.wustl.mir.erl.ihe.util.Status Status} instance.
       */
      public static Status getStatus(String name) {
         return Enum.valueOf(TSTStatus.class, name);
      }

      // ----------------------- Phases for this status code
      static {
         StatusHelper.addCodeSet(setCode, TSTStatus.class);
      }
   } // EO TSTStatus enum

} // EO CDAInspector class

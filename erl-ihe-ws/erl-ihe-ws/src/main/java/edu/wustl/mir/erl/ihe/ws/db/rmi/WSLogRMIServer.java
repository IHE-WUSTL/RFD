/*******************************************************************************
 * Copyright (c) 2014 Washington University in St. Louis All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. The License is available at:
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
 * or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License. Contributors:
 * Initial author: Ralph Moulton / MIR WUSM IHE Development Project
 * moultonr@mir.wustl.edu
 *******************************************************************************/
package edu.wustl.mir.erl.ihe.ws.db.rmi;

import java.io.Closeable;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.log4j.Logger;

import edu.wustl.mir.erl.ihe.util.Util;
import edu.wustl.mir.erl.ihe.ws.WSProperties;
import edu.wustl.mir.erl.ihe.ws.db.WSLog;

/**
 * Singleton RMI Receiver for {@link WSLog} instances created when a WS message
 * is processed.
 * <ul>
 * <li>Use the static {@link #initialize(int) initialize}
 * method to create and start a WSLogRMIReceiver instance.</li>
 * <li>Use the instance {@link #close} method to stop the instance before
 * exiting the program.</li>
 * </ul>
 * 
 * @see WSLogRMIClient
 */
public class WSLogRMIServer implements WSLogRemoteInterface, WSProperties, Serializable,
   Closeable {
   private static final long serialVersionUID = 1L;
   private static WSLogRMIServer server = null;

   private static Registry registry = null;
   private static AtomicInteger nextId = new AtomicInteger();
   private static Logger log = null;
   
   private static List<WSLogRMIReceiverInterface> listeners = new CopyOnWriteArrayList<>();

   /**
    * Required no argument constructor
    * @throws RemoteException on error
    */
   private WSLogRMIServer() throws RemoteException {
      super();
   }
   
   /**
    * Register new listener
    * @param listener WSLogRMIReceive listener
    */
   public static void registerListener(WSLogRMIReceiverInterface listener) {
      listeners.add(listener);
   }
   /**
    * De-register listener
    * @param listener WSLogRMIReceive listener
    */
   public static void unRegisterListener(WSLogRMIReceiverInterface listener) {
      listeners.remove(listener);
   }

   /*
    * (non-Javadoc)
    * 
    * @see
    * edu.wustl.mir.erl.ihe.ws.db.WSLogRMI#submitWSLog(edu.wustl.mir.erl.ihe
    * .ws.db.WSLog)
    */
   @Override
   public void submitWSLog(WSLog wsLog) throws RemoteException,
      NullPointerException {
      try {
         if (wsLog.getId() == null || wsLog.getId() <= 0) {
            wsLog.setId(nextId.incrementAndGet());
         }
         for (WSLogRMIReceiverInterface listener : listeners) {
            listener.receiveWSLogRMI(wsLog);
         }
         log.info("RMI Received WSlog for msg from: " + wsLog.getClientIp());
      } catch (Exception e) {
         log.error("WSLogRMIReceiver.submitWSLog error " + Util.getEM(e));
      }
   }

   /**
    * Create and start RMI receiver for {@link WSLog} instances generated by
    * transactions processed by a process running
    * {@link edu.wustl.mir.erl.ihe.ws.server.WSServer WSServer}.
    * 
    * @param port RMI registry port.
    * @return WSLogRMIServer instance.
    * @throws RemoteException on communication error.
    * @throws Exception if calling parameters are invalid.
    */
   public static WSLogRMIServer initialize(int port)
      throws RemoteException, Exception {
      if (server != null) throw new Exception(
         "attempt to initialize WSLogRMIReceiver multiple times");

      server = new WSLogRMIServer();
      log = Logger.getLogger("rmi." + WSLOG_RMI_SHORT_NAME);
      
      WSLogRemoteInterface stub = (WSLogRemoteInterface) UnicastRemoteObject.exportObject(server, 0);

      registry = LocateRegistry.createRegistry(port);

      registry.bind(WSLOG_RMI_LONG_NAME, stub);
      log.info(WSLOG_RMI_SHORT_NAME + " bound");

      return server;
   } // EO start method.

   @Override
   public void close() {
      try {
         Util.invoked(log);
         registry.unbind(WSLOG_RMI_LONG_NAME);
         UnicastRemoteObject.unexportObject(this, true);
         log.info(WSLOG_RMI_SHORT_NAME + " shut down");
      } catch (Exception e) {
         log.warn(e.getClass().getName() + " in " + Util.classMethod() + " "
            + Util.getEM(e));
      }

   }
   
   /**
    * @return next id for wsLog.
    */
   public static int getNextId() {
      return nextId.incrementAndGet();
   }
}
